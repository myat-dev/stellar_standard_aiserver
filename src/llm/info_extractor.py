from langchain.prompts import PromptTemplate
from langchain_openai import ChatOpenAI

from src.helpers.conf_loader import MODELS_CONF
from src.helpers.env_loader import OPENAI_API_KEY


# 名前と訪問目的を抽出するプロンプト
name_purpose_prompt = PromptTemplate(
    input_variables=["response"],
    template="""
あなたは、ユーザーの発言から「名前」又は「会社名 + 名前」と「訪問目的（ご用件）」を抽出するアシスタントです。  
ただし、**名前と目的を混同しないでください。**

---

### 抽出ルール

- 名前と訪問目的の両方が含まれている場合 → ["名前", "訪問目的"] の形式で返してください。
- 名前のみ含まれている場合 → ["名前", null] を返してください。
- 訪問目的のみ含まれている場合 → [null, "訪問目的"] を返してください。
- どちらも含まれていない場合 → [null, null] を返してください。

---

### 名前の定義:

- 日本人の人名（姓・名） 又は「会社名 + 名前」の形式、カタカナ・ひらがな・漢字に対応。
- 「ミヤット」「田中」「山田太郎」「ステラリンクの山田」「石材店の松本」など。
- 「法事」「相談」「お参り」などの語は**絶対に名前として扱わないでください。**

---

### 訪問目的の要約ルール:

- 「住職いますか？」「住職に会えますか？」など、**目的が省略されているが意図がある発話**は、「住職への面会」などと要約してください。
- **「誰かいますか？」「どなたかいらっしゃいますか？」のように話し相手が特定されていなくても、一般的に住職を訪ねてきたと判断できる文脈では「住職への面会」として扱ってください。**
- 「法事」「法要」「三回忌の法要」など、法要に関連する用語が含まれる場合は、それぞれ明確に訪問目的として抽出してください（例：「三回忌の法要について相談したい」→「三回忌の法要の相談」）。
- **ペットの葬儀や供養に関連する発言があれば、訪問目的を「ペット供養」としてください。**

- **墓地やお墓に関連する発言があれば、訪問目的を「墓地のご相談」としてください。**

- ただし、以下の特例は必ず優先してください（一般ルールより強い）:
  - 発言に「睡蓮墓地」という単語が含まれる場合 → 「睡蓮墓地のご相談」
  - 発言に「樹木葬墓地」という単語が含まれる場合 → 「樹木葬墓地のご相談」
  - 発言に「樹木葬」という単語が含まれる場合 → 必ず「樹木葬墓地のご相談」

- **できる限り原文の意味を保った短いフレーズ**を使用してください（例：「法事の相談したいです」→「法事の相談」）。
- 「相談」や「話」など抽象的すぎる単語に短縮しないでください。
- 不明確な場合でも、発言内容から合理的に想像できる目的があれば、それを簡潔に記述してください。

例：
- 「お供え物を持ってきました」→「お供え物の渡し」
- 「お付け届け物を持ってきました。住職いらっしゃいますか？」→「お付け届け物の渡しと面会」
- 「誰かいますか？」→「住職への面会」
- 「三回忌の法要について相談したいのですが」→「三回忌の法要の相談」
- 「ペットの火葬をお願いしたい」→「ペット供養」
- 「お墓のことで相談があります」→「墓地のご相談」
- 「墓地の購入について相談があります」→「墓地のご相談」
- 「睡蓮墓地の購入について相談があります」→「睡蓮墓地のご相談」
- 「樹木葬墓地のことで相談があります」→「樹木葬墓地のご相談」
- 「樹木葬について教えてください」→「樹木葬墓地のご相談」
- 「お焚き上げをしたいです」→「お焚き上げ」

---

ユーザーの発言: "{response}"

出力は **Pythonのリスト形式（JSON準拠）** で返してください。  
必ず以下のような形式で返してください（**コードブロックで囲まないでください**）：

- ["山田", "法事の相談"]
- ["ステラリンクの山田", "お墓案内"]
- [null, "お参り"]
- ["ミヤット", null]
- [null, null]

**「誰かいますか」の質問の時名前は住職じゃないです。気を付けて**  
**絶対に文字列で囲まれたリストのみを返してください。**  
**絶対に ``` や “出力:” のような補足テキストを含めないでください。**
"""
)



# 名前のみを抽出するプロンプト
name_prompt = PromptTemplate(
    input_variables=["response"],
    template="""
あなたは、ユーザーの発言から「名前」または「会社名 + 名前」の形式を抽出するアシスタントです。

### 名前の定義:

- 日本人の人名（姓・名） 又は「会社名 + 名前」の形式、カタカナ・ひらがな・漢字に対応。
- 「ミヤット」「田中」「山田太郎」「ステラリンクの山田」「石材店の松本」など。
- 「〜です」「〜と申します」「〜といいます」「〜になります」などの丁寧な言い回しが付いていても、該当する部分だけを取り出してください。
- 以下の語は**絶対に名前として抽出しないでください**:
- 「法事」「相談」「住職」「面会」「お参り」「用事」「話」など、目的・職業・行為・宗教に関連する語。

---

⚠️ 出力形式ルール:
- 名前や「会社名 + 名前」が含まれている場合 → `"ステラリンクの山田"` のように **ダブルクォート付きの文字列のみ** を返してください。
- 含まれていない場合 → `null` を返してください。
- 出力は **JSONとして有効な1つの値（"名前" または null）** にしてください。
- **補足文、コードブロック（```）、ラベル、説明などは一切含めないでください。**

---

ユーザーの発言: "{response}"

出力:
"""
)

# 業者の会社名・名前・訪問目的を抽出するプロンプト
gyosha_name_purpose_prompt = PromptTemplate(
    input_variables=["response"],
    template="""
あなたは龍泉寺の受付を担当する、業者対応専用のアシスタントです。  
訪問業者の「会社名と氏名」および「訪問目的（作業内容や用件）」を抽出します。

---

### 抽出ルール

- 業者が会社名と氏名を両方述べた場合 → ["会社名 + 名前", "訪問目的"] の形式で返してください。  
  例：「ステラリンクの前田です。点検に来ました」→ ["ステラリンクの前田", "点検"]
- 業者が名前だけ述べた場合 → ["名前", "訪問目的"] の形式で返してください。  
  例：「前田です。修理です」→ ["前田", "修理"]
- 訪問目的が省略されている場合でも、文脈から推測できる場合は簡潔に記述してください。  
  例：「宅配便です」→ ["ヤマト運輸の佐藤", "宅配荷物の配達"]
- 名前がなく、訪問目的だけ分かる場合 → [null, "訪問目的"]  
- どちらも不明な場合 → [null, null]

---

### 名前の定義
- 「会社名 + 名前」または「名前」の形式（カタカナ・ひらがな・漢字に対応）
- 例：「ヤマト運輸の佐藤」「佐川急便の田中」「ステラリンクの前田」「田中」「松本」など
- 「点検」「作業」「宅配」などの語は**絶対に名前として扱わない**

---

### 訪問目的の定義
- 配達、設置、点検、修理、工事、引き取り、見積りなど具体的な業務内容
- 曖昧な表現の場合はできるだけ明確に要約
  - 「作業に来ました」→「作業」
  - 「確認です」→「確認作業」
  - 「点検です」→「点検」
  - 「荷物です」→「宅配荷物の配達」

---

ユーザーの発言: "{response}"

出力は **Pythonのリスト形式（JSON準拠）** で返してください。  
必ず以下の形式で返してください（**コードブロックや補足テキストを含めないでください**）：

- ["ステラリンクの前田", "点検"]
- ["佐藤", "宅配荷物の配達"]
- [null, "修理作業"]
- ["松本", null]
- [null, null]
"""
)

# 電話番号のみを抽出するプロンプト
phone_prompt = PromptTemplate(
    input_variables=["response"],
    template="""
あなたは、ユーザーの発言から「電話番号」のみを抽出するアシスタントです。

- 電話番号が含まれている場合 → `"09012345678"` のように **ダブルクォート付きの文字列** を返してください。
- 電話番号が含まれていない場合 → `null` を返してください。

---

⚠️ 出力ルール:
- 必ず `"電話番号"` または `null` の **どちらかのみ** を返してください。
- 出力に **補足文、ラベル（例: 電話番号:）、コードブロック（```）** を一切含めないでください。
- 出力は **JSONとして有効な文字列形式** にしてください。

---

ユーザーの発言: "{response}"

出力:
"""
)

# LLMの初期化
llm = ChatOpenAI(
    api_key=OPENAI_API_KEY, temperature=0, model=MODELS_CONF["llm"]["version"]
)

# チェーンの作成
name_purpose_chain = name_purpose_prompt | llm
name_chain = name_prompt | llm
phone_chain = phone_prompt | llm
gyosha_name_purpose_chain = gyosha_name_purpose_prompt | llm